package org.saki.demo;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;



public class CreateDummyIdocScript extends JPanel
implements ActionListener {
	
	static JFrame frame ;
    static JFrame resultFrame ;
    JFileChooser fc;
    JButton openButton;
    JTextField txtSampleScript;
    JTextField txtOutputScript;
    JLabel lblFilePath;    
    JPasswordField passwordField;
    JTabbedPane tabbedPane;
    JPanel card1;
    
    final static String BUTTONPANEL = "Select File for Processing";
    
    static Container globalPane;
    JCheckBox senderAdapter;
    JCheckBox receiverAdapter;
    JButton processButton;
    File file;
    final static String TEXTPANEL = "User Settings";    
    String domain;
    String user;
    String password;
    String attribute;
    Boolean senderSelected;
    Boolean receiverSelected;
    String outputScript = "";
    
    Boolean resultPane = false;
	
	
    public static void main(String[] args) {
        /* Use an appropriate Look and Feel */
        try {
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        /* Turn off metal's use of bold fonts */
        UIManager.put("swing.boldMetal", Boolean.FALSE);
        
        //Schedule a job for the event dispatch thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }

            private void createAndShowGUI() {
                //Create and set up the window.
                frame = new JFrame("Create Dummy Idoc Mass Processing Script");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                //Create and set up the content pane.
                CreateDummyIdocScript dummyScript = new CreateDummyIdocScript();
                globalPane = frame.getContentPane();
                dummyScript.addComponentToPane(globalPane);

                //Display the window.
                frame.pack();
                frame.setVisible(true);
                
                
                
                
            }
        });
    }

    
    @SuppressWarnings("serial")
	public void addComponentToPane(Container pane) {
    	
    	KeyListener keyListener = new KeyListener() {
    	      public void keyPressed(KeyEvent keyEvent) {
    	        printIt("Pressed", keyEvent);
    	      }

    	      public void keyReleased(KeyEvent keyEvent) {
    	        printIt("Released", keyEvent);
    	      }

    	      public void keyTyped(KeyEvent keyEvent) {
    	        printIt("Typed", keyEvent);
    	      }

    	      private void printIt(String title, KeyEvent keyEvent) {
    	        int keyCode = keyEvent.getKeyCode();
    	        String keyText = KeyEvent.getKeyText(keyCode);
    	        
    	        domain = txtSampleScript.getText(); 
    	        
    	      }
    	    };
    	    
    	    tabbedPane = new JTabbedPane();
    	    fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            fc.setSelectedFile(new File("C:\\temp\\file.txt"));
            
            
            card1 = new JPanel(new GridLayout(0,1,45,65));
            

            card1.add(new Label("Script !"));
            txtSampleScript = new JTextField("/usr/sap/xlink/XL0/Scripts/ff_inproc2_lb.sh -m o9asap.nestle.com -s O9A -g RFC-OTHER -u RFC-XLKAOA-D -p f11e112b400ca41f890e1021b10c8911 -c 103 -l EN -F /GLB/XGT_CREATE_DUMMY_IDOC1 /zdata/O9A/vn/glb/vnedinv01/Fiscal/VN10.VNEEDINV01.CSIFISUD01.20190720-052904-007.csv", 30); 
            card1.add(txtSampleScript);
            txtSampleScript.addKeyListener(keyListener);
            
            
            openButton = new JButton("Upload list of files...");
            openButton.setPreferredSize(new Dimension(400, 40));
            openButton.addActionListener(this);
            card1.add(openButton);
            

            lblFilePath = new JLabel("");
            card1.add(lblFilePath);            
            
            processButton = new JButton("Create mass script");
            processButton.setPreferredSize(new Dimension(400, 40));
            processButton.addActionListener(this);
            card1.add(processButton);
            
			txtOutputScript = new JTextField("outputScript", 0); 
            card1.add(txtOutputScript);
            txtOutputScript.addKeyListener(keyListener);
            
            
            tabbedPane.addTab(TEXTPANEL, card1);
            globalPane.add(tabbedPane, BorderLayout.CENTER);
    }
    	    
    	    
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
		if (e.getSource() == openButton) {
			
			int returnVal = fc.showOpenDialog(CreateDummyIdocScript.this);
			 
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
                lblFilePath.setText("File Read " + file.getAbsolutePath());
                //Display the window.
                frame.pack();
                frame.setVisible(true);			
		} }
		
	
            else if (e.getSource() == processButton) {
            	String outputScript = txtSampleScript.getText().trim();
            	String outputScriptFinal = "";
            	
            	String[] splited = outputScript.split("\\s+");
            	String fullFileName = splited[splited.length - 1];
            	String[] fileNameSplit = fullFileName.split("\\/");
            	String onlyFileName = fileNameSplit[fileNameSplit.length - 1];
            	
            	
            	InputStream is1;
				try {
					is1 = new FileInputStream(file);
					BufferedReader br1 = null;
					br1 = new BufferedReader(new InputStreamReader(is1));
					 
					String currFileName = "";
					while (( currFileName  = br1.readLine()) != null) { 
					String currentScript = outputScript ;
					currentScript = currentScript.replaceAll(onlyFileName, currFileName);
			
					if (outputScriptFinal.equals("")){
						outputScriptFinal = currentScript;
					}else{
					outputScriptFinal = outputScriptFinal.concat(";".concat(currentScript));
					}
					
					
					}					
					txtOutputScript.setText(outputScriptFinal);
					
					
//					globalPane.remove(tabbedPane);
					SwingUtilities.updateComponentTreeUI(frame);

					
					
				} catch (FileNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}



            	
            }
		
		}

	}
	

